/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers';
import type {
	FunctionFragment,
	Result,
	EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
	TypedEventFilter,
	TypedEvent,
	TypedListener,
	OnEvent,
} from './common';

export interface RedeemerInterface extends utils.Interface {
	functions: {
		'deadline()': FunctionFragment;
		'grid()': FunctionFragment;
		'owner()': FunctionFragment;
		'phon()': FunctionFragment;
		'redeem()': FunctionFragment;
		'renounceOwnership()': FunctionFragment;
		'transferOwnership(address)': FunctionFragment;
		'withdraw()': FunctionFragment;
	};

	getFunction(
		nameOrSignatureOrTopic:
			| 'deadline'
			| 'grid'
			| 'owner'
			| 'phon'
			| 'redeem'
			| 'renounceOwnership'
			| 'transferOwnership'
			| 'withdraw',
	): FunctionFragment;

	encodeFunctionData(functionFragment: 'deadline', values?: undefined): string;
	encodeFunctionData(functionFragment: 'grid', values?: undefined): string;
	encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
	encodeFunctionData(functionFragment: 'phon', values?: undefined): string;
	encodeFunctionData(functionFragment: 'redeem', values?: undefined): string;
	encodeFunctionData(
		functionFragment: 'renounceOwnership',
		values?: undefined,
	): string;
	encodeFunctionData(
		functionFragment: 'transferOwnership',
		values: [string],
	): string;
	encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;

	decodeFunctionResult(functionFragment: 'deadline', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'grid', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'phon', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: 'renounceOwnership',
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: 'transferOwnership',
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

	events: {
		'OwnershipTransferred(address,address)': EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface OwnershipTransferredEventObject {
	previousOwner: string;
	newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
	[string, string],
	OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
	TypedEventFilter<OwnershipTransferredEvent>;

export interface Redeemer extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	interface: RedeemerInterface;

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>;

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>,
	): Array<TypedListener<TEvent>>;
	listeners(eventName?: string): Array<Listener>;
	removeAllListeners<TEvent extends TypedEvent>(
		eventFilter: TypedEventFilter<TEvent>,
	): this;
	removeAllListeners(eventName?: string): this;
	off: OnEvent<this>;
	on: OnEvent<this>;
	once: OnEvent<this>;
	removeListener: OnEvent<this>;

	functions: {
		deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

		grid(overrides?: CallOverrides): Promise<[string]>;

		owner(overrides?: CallOverrides): Promise<[string]>;

		phon(overrides?: CallOverrides): Promise<[string]>;

		redeem(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		withdraw(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;
	};

	deadline(overrides?: CallOverrides): Promise<BigNumber>;

	grid(overrides?: CallOverrides): Promise<string>;

	owner(overrides?: CallOverrides): Promise<string>;

	phon(overrides?: CallOverrides): Promise<string>;

	redeem(
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	renounceOwnership(
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	transferOwnership(
		newOwner: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	withdraw(
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	callStatic: {
		deadline(overrides?: CallOverrides): Promise<BigNumber>;

		grid(overrides?: CallOverrides): Promise<string>;

		owner(overrides?: CallOverrides): Promise<string>;

		phon(overrides?: CallOverrides): Promise<string>;

		redeem(overrides?: CallOverrides): Promise<void>;

		renounceOwnership(overrides?: CallOverrides): Promise<void>;

		transferOwnership(
			newOwner: string,
			overrides?: CallOverrides,
		): Promise<void>;

		withdraw(overrides?: CallOverrides): Promise<void>;
	};

	filters: {
		'OwnershipTransferred(address,address)'(
			previousOwner?: string | null,
			newOwner?: string | null,
		): OwnershipTransferredEventFilter;
		OwnershipTransferred(
			previousOwner?: string | null,
			newOwner?: string | null,
		): OwnershipTransferredEventFilter;
	};

	estimateGas: {
		deadline(overrides?: CallOverrides): Promise<BigNumber>;

		grid(overrides?: CallOverrides): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<BigNumber>;

		phon(overrides?: CallOverrides): Promise<BigNumber>;

		redeem(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		withdraw(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;
	};

	populateTransaction: {
		deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		grid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		phon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		redeem(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		withdraw(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;
	};
}
